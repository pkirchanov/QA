{
	"info": {
		"_postman_id": "209197ac-c3b2-4e67-9c48-1c534dc0b358",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос\r",
							"\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"\r",
							"pm.test (\"Body get right string\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});\r",
							"\r",
							"// Check for body type is string\r",
							"\r",
							"pm.test (\"Body type is string\", function () {\r",
							"    typeof(pm.response) === \"string\" || true;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос\r",
							"\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// console.log(\"моя информация = \", jsonData);\r",
							"// console.log(\"Имя = \", jsonData.name);\r",
							"// console.log(\"Дети = \", jsonData.family.children);\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name c request (name вбить руками.)\r",
							"\r",
							"pm.test(\"name = name\", function() {\r",
							"    pm.expect(jsonData.name).to.eql(\"Pavel\");\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age c request (age вбить руками.)\r",
							"\r",
							"pm.test(\"age = age\", function() {\r",
							"    jsonAge = pm.expect(jsonData.age).to.eql(\"40\");\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary c request (salary вбить руками.)\r",
							"\r",
							"pm.test(\"salary = salary\", function() {\r",
							"    pm.expect(jsonData.salary).eql(1000);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request.\r",
							"\r",
							"// var reqBody = pm.request.url.query.toObject();\r",
							"// console.log(\"reqData\", reqBody);\r",
							"\r",
							"var reqData = request.data;\r",
							"// console.log(\"reqData\", reqData);\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name c request (name забрать из request.)\r",
							"\r",
							"pm.test(\"request name = response name\", function() {\r",
							"    pm.expect(jsonData.name).to.eql(reqData.name);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age c request (age забрать из request.)\r",
							"\r",
							"pm.test(\"request age = response age\", function() {\r",
							"    pm.expect(jsonData.age).to.eql(reqData.age);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary c request (salary забрать из request.)\r",
							"\r",
							"// другой соособ сделать из строки число - var salaryNum = parseInt(reqData.salary);\r",
							"var salaryNum = +reqData.salary;  \r",
							"pm.test(\"request salary = response salary\", function() {\r",
							"    pm.expect(salaryNum).to.eql(jsonData.salary);\r",
							"});\r",
							"\r",
							"// Проверяем какие типы данных в запросе и ответе.\r",
							"// var req = reqData.salary;\r",
							"// var resp = jsonData.salary;\r",
							"\r",
							"// console.log(\"req\", req);\r",
							"// console.log(\"resp\", resp);\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"\r",
							"var respFamily = jsonData.family;\r",
							"// console.log(\"respFamily\", respFamily);\r",
							"\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"pm.test(\"u_salary_1_5_year = salary * 4\", function() {\r",
							"    pm.expect(respFamily.u_salary_1_5_year).to.eql(reqData.salary * 4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Pavel",
							"type": "text"
						},
						{
							"key": "age",
							"value": "40",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "01 object_info_3 - ver. request toObject",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"console.log(\"jsonData\", jsonData);\r",
							"\r",
							"// 4. Спарсить request\r",
							"\r",
							"var reqData = pm.request.url.query.toObject();\r",
							"console.log(\"reqData = \", reqData);\r",
							"\r",
							"//  второй вариант\r",
							"\r",
							"var reqData_2 = {};\r",
							"pm.request.url.query.all().forEach((param) => {reqData_2[param.key] = param.value});\r",
							"console.log(\"reqData_2 = \", reqData_2);\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name c request (name забрать из request.)\r",
							"\r",
							"pm.test(\"response name = request name\", function() {\r",
							"    pm.expect(jsonData.name).to.eql(reqData.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"pm.test(\"response age = request age\", function() {\r",
							"    pm.expect(jsonData.age).to.eql(reqData.age)\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"// Проверяем соответствуют ли форматы данных в переменных\r",
							"reqSalary = reqData.salary;\r",
							"respSalary = jsonData.salary;\r",
							"console.log(\"reqSalary\", reqSalary);\r",
							"console.log(\"respSalary\", respSalary);\r",
							"\r",
							"reqSalary = +reqData.salary;\r",
							"pm.test(\"response salary = request salary\", function() {\r",
							"    pm.expect(jsonData.salary).to.eql(reqSalary);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"\r",
							"var respFamily = jsonData.family;\r",
							"console.log(\"respFamily\", respFamily);\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметр name.\r",
							"// вариант is.key\r",
							"pm.test(\"dog has key name\", function() {\r",
							"    pm.expect(respFamily.pets.dog.name).is.key;\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"// вариант .to.have()\r",
							"\r",
							"pm.test(\"dog has key age\", function() {\r",
							"    pm.expect(respFamily.pets.dog.age).is.key;\r",
							"\r",
							"    // все варианты работаю без ошибок\r",
							"\r",
							"    // pm.expect(respFamily.pets.dog.age).is;\r",
							"    // pm.expect(respFamily.pets.dog.age).is.property;\r",
							"    // pm.expect(respFamily.pets.dog.age).to.have.key;\r",
							"    // pm.expect(respFamily.pets.dog.age).to.have.property;\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"\r",
							"pm.test(\"dog name = Luky\", function() {\r",
							"    pm.expect(respFamily.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"\r",
							"pm.test(\"dog age = 4\", function() {\r",
							"    pm.expect(respFamily.pets.dog.age).to.eql(4)\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Pavel&age=40&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Pavel"
						},
						{
							"key": "age",
							"value": "40"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "02 object_info_3 - ver. request to Json",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"console.log(\"jsonData\", jsonData);\r",
							"\r",
							"// 4. Спарсить request\r",
							"\r",
							"// var reqData = request.data;\r",
							"var reqData = pm.request.toJSON().url.query;\r",
							"// reqData[i].value\r",
							"console.log(\"reqData\", reqData);\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name c request (name забрать из request.)\r",
							"\r",
							"pm.test(\"response name = request name\", function() {\r",
							"    pm.expect(jsonData.name).to.eql(reqData[0].value);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"pm.test(\"response age = request age\", function() {\r",
							"    pm.expect(jsonData.age).to.eql(reqData[1].value)\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"// Проверяем соответствуют ли форматы данных в переменных\r",
							"reqSalary = reqData[2].value;\r",
							"respSalary = jsonData.salary;\r",
							"console.log(\"reqSalary\", reqSalary);\r",
							"console.log(\"respSalary\", respSalary);\r",
							"\r",
							"reqSalary = +reqData[2].value;\r",
							"pm.test(\"response salary = request salary\", function() {\r",
							"    pm.expect(jsonData.salary).to.eql(reqSalary);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"\r",
							"var respFamily = jsonData.family;\r",
							"console.log(\"respFamily\", respFamily);\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметр name.\r",
							"// вариант is.key\r",
							"pm.test(\"dog has key name\", function() {\r",
							"    pm.expect(respFamily.pets.dog.name).is.key;\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"// вариант .to.have()\r",
							"\r",
							"pm.test(\"dog has key age\", function() {\r",
							"    pm.expect(respFamily.pets.dog.age).is.key;\r",
							"\r",
							"    // все варианты работаю без ошибок\r",
							"\r",
							"    // pm.expect(respFamily.pets.dog.age).is;\r",
							"    // pm.expect(respFamily.pets.dog.age).is.property;\r",
							"    // pm.expect(respFamily.pets.dog.age).to.have.key;\r",
							"    // pm.expect(respFamily.pets.dog.age).to.have.property;\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"\r",
							"pm.test(\"dog name = Luky\", function() {\r",
							"    pm.expect(respFamily.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"\r",
							"pm.test(\"dog age = 4\", function() {\r",
							"    pm.expect(respFamily.pets.dog.age).to.eql(4)\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "162.55.220.72:5005/object_info_3?name=Pavel&age=40&salary=1000",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Pavel"
						},
						{
							"key": "age",
							"value": "40"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "03 object_info_3 - ver. 3 ShouldBeEqual obj",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"console.log(\"jsonData\", jsonData);\r",
							"\r",
							"// 4. Спарсить request\r",
							"\r",
							"var reqData = pm.request.url.query.toObject();\r",
							"console.log(\"reqData = \", reqData);\r",
							"\r",
							"ShouldBeEqual = {\r",
							"    \"NameEqual\": [jsonData.name, reqData.name],\r",
							"    \"AgeEqual\": [jsonData.age, reqData.age],\r",
							"    \"SalaryEqual\": [jsonData.salary, +reqData.salary],\r",
							"    \"PetNameExist\": [true, jsonData.family.pets.dog.hasOwnProperty(\"name\")],\r",
							"    \"PetAgeExist\": [true, jsonData.family.pets.dog.hasOwnProperty(\"age\")],\r",
							"    \"PetName = Luky\": [jsonData.family.pets.dog.name, \"Luky\"],\r",
							"    \"PetAge = 4\": [jsonData.family.pets.dog.age, parseInt(\"4\")]\r",
							"};\r",
							"\r",
							"// Цикл для всех пар. Подставляет тестовое имя и сравнивает параметры.\r",
							"for (const [testName, compare] of Object.entries(ShouldBeEqual)) {\r",
							"    pm.test(testName, function() {\r",
							"        pm.expect(compare[0]).to.eql(compare[1]);\r",
							"    })\r",
							"};\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// // 1. Отправить запрос\r",
							"// // 2. Статус код 200\r",
							"\r",
							"// pm.test(\"Status code 200\", function() {\r",
							"//     pm.response.to.have.status(200);\r",
							"// });\r",
							"\r",
							"// // 3. Спарсить response body в json\r",
							"\r",
							"// var jsonData = pm.response.json();\r",
							"// console.log(\"jsonData\", jsonData);\r",
							"\r",
							"// // 4. Спарсить request\r",
							"\r",
							"// // var reqData = request.data;\r",
							"// var reqData = pm.request.toJSON().url.query;\r",
							"// // reqData[i].value\r",
							"// console.log(\"reqData\", reqData);\r",
							"\r",
							"// // первый вариант, в удобочитаемой форме\r",
							"\r",
							"// var request_1 = pm.request.url.query.toObject();\r",
							"// console.log(\"request_1 = \", request_1);\r",
							"\r",
							"// //  второй вариант, в удобочитаемой форме\r",
							"\r",
							"// var query1 = {};\r",
							"// pm.request.url.query.all().forEach((param) => {query1[param.key] = param.value});\r",
							"// console.log(\"query1 = \", query1);\r",
							"\r",
							"// // 5. Проверить, что name в ответе равно name c request (name забрать из request.)\r",
							"\r",
							"// pm.test(\"response name = request name\", function() {\r",
							"//     pm.expect(jsonData.name).to.eql(reqData[0].value);\r",
							"// });\r",
							"\r",
							"// // 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"// pm.test(\"response age = request age\", function() {\r",
							"//     pm.expect(jsonData.age).to.eql(reqData[1].value)\r",
							"// });\r",
							"\r",
							"// // 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"// // Проверяем соответствуют ли форматы данных в переменных\r",
							"// reqSalary = reqData[2].value;\r",
							"// respSalary = jsonData.salary;\r",
							"// console.log(\"reqSalary\", reqSalary);\r",
							"// console.log(\"respSalary\", respSalary);\r",
							"\r",
							"// reqSalary = +reqData[2].value;\r",
							"// pm.test(\"response salary = request salary\", function() {\r",
							"//     pm.expect(jsonData.salary).to.eql(reqSalary);\r",
							"// });\r",
							"\r",
							"// // 8. Вывести в консоль параметр family из response.\r",
							"\r",
							"// var respFamily = jsonData.family;\r",
							"// console.log(\"respFamily\", respFamily);\r",
							"\r",
							"// // 9. Проверить, что у параметра dog есть параметр name.\r",
							"// // вариант is.key\r",
							"// pm.test(\"dog has key name\", function() {\r",
							"//     pm.expect(respFamily.pets.dog.name).is.key;\r",
							"// });\r",
							"\r",
							"// // 10. Проверить, что у параметра dog есть параметры age.\r",
							"// // вариант .to.have()\r",
							"\r",
							"// pm.test(\"dog has key age\", function() {\r",
							"//     pm.expect(respFamily.pets.dog.age).is.key;\r",
							"\r",
							"//     // все варианты работаю без ошибок\r",
							"\r",
							"//     // pm.expect(respFamily.pets.dog.age).is;\r",
							"//     // pm.expect(respFamily.pets.dog.age).is.property;\r",
							"//     // pm.expect(respFamily.pets.dog.age).to.have.key;\r",
							"//     // pm.expect(respFamily.pets.dog.age).to.have.property;\r",
							"// });\r",
							"\r",
							"// // 11. Проверить, что параметр name имеет значение Luky.\r",
							"\r",
							"// pm.test(\"dog name = Luky\", function() {\r",
							"//     pm.expect(respFamily.pets.dog.name).to.eql(\"Luky\");\r",
							"// });\r",
							"\r",
							"// // 12. Проверить, что параметр age имеет значение 4.\r",
							"\r",
							"// pm.test(\"dog age = 4\", function() {\r",
							"//     pm.expect(respFamily.pets.dog.age).to.eql(4)\r",
							"// });\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "162.55.220.72:5005/object_info_3?name=Pavel&age=40&salary=1000",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Pavel"
						},
						{
							"key": "age",
							"value": "40"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"console.log(\"jsonData\", jsonData);\r",
							"\r",
							"// 4. Спарсить request.\r",
							"\r",
							"var reqData = pm.request.toJSON().url.query;\r",
							"console.log(\"reqData\", reqData);\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name c request (name забрать из request.)\r",
							"\r",
							"pm.test(\"name in response = name in request\", function() {\r",
							"    pm.expect(jsonData.name).to.eql(reqData[0].value);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"var reqAge = +reqData[1].value;\r",
							"pm.test(\"age in response = age in request\", function() {\r",
							"    pm.expect(jsonData.age).to.eql(reqAge);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"\r",
							"var reqSalary = reqData[2].value;\r",
							"console.log(\"reqSalary\", reqSalary);\r",
							"\r",
							"// 8. ывести в консоль параметр salary из response.\r",
							"\r",
							"var respSalary = jsonData.salary;\r",
							"console.log(\"respSalary\", respSalary);\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"\r",
							"var respSal_0 = respSalary[0];\r",
							"console.log(\"respSal_0\", respSal_0);\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"var respSal_1 = respSalary[1];\r",
							"console.log(\"respSal_1\", respSal_1);\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"var respSal_2 = respSalary[2];\r",
							"console.log(\"respSal_2\", respSal_2);\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"salary in response[0] = salary in request\", function() {\r",
							"    pm.expect(respSal_0).to.eql(+reqData[2].value);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"salary in response[1] = salary in request * 2\", function() {\r",
							"    pm.expect(+respSal_1).to.eql(+reqData[2].value * 2 );\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"salary in response[1] = salary in request * 3\", function() {\r",
							"    pm.expect(+respSal_2).to.eql(+reqData[2].value * 3 );\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"\r",
							"pm.environment.set(\"name\", \"\");\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"\r",
							"pm.environment.set(\"age\", \"\");\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"\r",
							"pm.environment.set(\"salary\", \"\");\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"\r",
							"pm.environment.set(\"name\", jsonData.name);\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"\r",
							"pm.environment.set(\"age\", jsonData.age);\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"\r",
							"pm.environment.set(\"salary\", respSal_0);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "162.55.220.72:5005/object_info_4?name=Pavel&age=40&salary=1000",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Pavel"
						},
						{
							"key": "age",
							"value": "40"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4 ver. toObject_forEach",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"console.log(\"jsonData\", jsonData);\r",
							"\r",
							"// 4. Спарсить request.\r",
							"\r",
							"var reqData = pm.request.url.query.toObject();\r",
							"console.log(\"reqData\", reqData);\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name c request (name забрать из request.)\r",
							"\r",
							"pm.test(\"name in response = name in request\", function() {\r",
							"    pm.expect(jsonData.name).to.eql(reqData.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"var reqAge = +reqData.age;\r",
							"pm.test(\"age in response = age in request\", function() {\r",
							"    pm.expect(jsonData.age).to.eql(reqAge);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"\r",
							"var reqSalary = reqData.salary;\r",
							"console.log(\"reqSalary\", reqSalary);\r",
							"\r",
							"// 8. ывести в консоль параметр salary из response.\r",
							"\r",
							"var respSalary = jsonData.salary;\r",
							"console.log(\"respSalary\", respSalary);\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"\r",
							"var respSal_0 = respSalary[0];\r",
							"console.log(\"respSal_0\", respSal_0);\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"var respSal_1 = respSalary[1];\r",
							"console.log(\"respSal_1\", respSal_1);\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"var respSal_2 = respSalary[2];\r",
							"console.log(\"respSal_2\", respSal_2);\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"salary in response[0] = salary in request\", function() {\r",
							"    pm.expect(respSal_0).to.eql(+reqData.salary);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"salary in response[1] = salary in request * 2\", function() {\r",
							"    pm.expect(+respSal_1).to.eql(+reqData.salary * 2 );\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"salary in response[1] = salary in request * 3\", function() {\r",
							"    pm.expect(+respSal_2).to.eql(+reqData.salary * 3 );\r",
							"});\r",
							"\r",
							"// 15-17. Создать в окружении переменные name, age, salary\r",
							"// 18-20. Передать в окружение переменную name\r",
							"\r",
							"var paramsToEnv = [\"name\", \"age\", \"salary\"]\r",
							"paramsToEnv.forEach(function(element) {\r",
							"    pm.environment.set(element, reqData[element])\r",
							"});\r",
							"\r",
							"// Logging each element through cycles \r",
							"\r",
							"for (key in jsonData.salary) {\r",
							"    console.log(\"Element: \" + key + \" Value: \" + jsonData.salary[key])\r",
							"};\r",
							"\r",
							"// Cycle for logging each element\r",
							"\r",
							"jsonData.salary.forEach(function(element) {\r",
							"    console.log(\"ElementSalary = \", parseInt(element))\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "162.55.220.72:5005/object_info_4?name=Pavel&age=40&salary=1000",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Pavel"
						},
						{
							"key": "age",
							"value": "40"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}